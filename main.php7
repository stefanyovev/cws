<?php

      session_start();

      $s = & $_SESSION;
      $p = & $_POST;
      $e = & $_SERVER;
      $f = & $_FILES;

      header( 'Content-type: text/html; charset=UTF-8' );
      header( 'Cache-control: no-cache, no-store, must-revalidate' );
      header_remove( Pragma ); header_remove( Expires );

      $www = 'www.' == strtolower( substr( $e[SERVER_NAME], 0, 4 ) );
      if( !$e[HTTPS] || $www ){
         header( 'Location: https://' . substr( $e[SERVER_NAME], $www ? 4 : 0 ) . $e[REQUEST_URI] );
         exit; }
      unset( $www );

      $home = trim( dirname( $e[PHP_SELF] ), '/' );
      $url = 'http' . ( $e[HTTPS] ? 's' : '' ) . '://' . $e[SERVER_NAME] . '/' . ( $home ? "$home/" : '' );

      function redirect( $to = '' ){ global $url;
         header( 'Location: ' . $url . $to ); exit; }

      if( get_magic_quotes_gpc() ) array_map( stripslashes, $p );

//######################################################################################################################################################################################

      function valid( $type, $data ){ switch( $type ){
         case urlnode: return true; } return false; }

      function esc( $data, $for = front ){ switch( $for ){
         case front: return htmlentities( $data, ENT_QUOTES, 'UTF-8' );
         case back: return addslashes( $data ); } }

      function tar( $x ){ $t = ''; foreach( explode( '/', $x ) as $y ) $t = $y;
         return $t; }

      function place( $x ){
         if( strlen( $x ) < 2 || strstr( $x, '/' ) === false ) return '';
         return substr( $x, 0, -1-strlen( tar( $x ) ) ); }

      function clamp( $x, $a, $b ){
         return ( $x < $a ? $a : ( $x > $b ? $b : $x ) ); }

      function color( $x, $o=1, $q=1 ){ $r = array(
         hexdec( substr( $x, 1, 2 ) ), hexdec( substr( $x, 3, 2 ) ), hexdec( substr( $x, 5, 2 ) ), $o );
         if( $q != 1 ) $r = array(
            round( clamp( $r[0]+($q-1)*255, 0, 255 ) ),
            round( clamp( $r[1]+($q-1)*255, 0, 255 ) ),
            round( clamp( $r[2]+($q-1)*255, 0, 255 ) ),
                   clamp( $r[3]+ $q-1     , 0, 1 ) );
         return 'rgba( '.implode( ', ', $r ).')'; }


//######################################################################################################################################################################################

      function mem(){
         return (include( 'data/memory.php' ) or null); }

      function & m( $x = '' ){ global $m; $mm = & $m; if( !$x ) return $mm;
         if( strstr( $x, '/' ) === false ){ $mm = & $m[$x]; return $mm; }
         foreach( explode( '/', $x ) as $y ) $mm = & $mm[$y]; return $mm; }

      function save(){ global $m;
         return file_put_contents( 'data/memory.php', '<?php return ' . var_export( $m, true ) . ' ?>' ); }

      function install(){ global $m;
         if( !mkdir( 'data', 0777 ) ) die( 'CANNOT CREATE DIR' );
         mkdir( 'data/data', 0777 ); mkdir( 'data/cache', 0777 );
         $m = array( );
         save(); }

      function newname( $x ){ $mm = & m( place( $x ) ); $x = tar( $x ); $y = '';
         if( isset( $mm[$x] ) ){ for( $y = 2; isset( $mm[ "$x-$y" ] ); $y++ ); $x .= $y ? "-$y" : ''; }
         return $x; }

      function make( $type, $x, $mime=null ){ global $m; $loc = place( $x ); $mm = & m( $loc ); $x = newname( $x );
         $id = 'data/data/' . ( $loc ? "$loc/$x" : $x );
         mkdir( $id );
         $mm[$x] = array(
            type => $type,
            time => time(),
            show => array( type => 'var/bit', $mm[show][0] ),
            title => array( type => 'var/text', $x ),
            descr => array( type => 'var/text', $x ),
            background => array( type => 'ui',
               color => $mm[background][color],
               opacity => $mm[background][opacity],
               size => array( type => 'var/enum', 'cover', cover, contain ),
               image => array( type => 'var/file', 'image/*' ) ) );
         if( $type == dir ){
            $mm[$x][background][random_image] = array( type => 'var/bit', 0 );
            $mm[$x][items] = array( type => 'ui',
               flow => array( type => 'var/enum', 'normal', horizontal, vertical, normal ),
               width => array( type => 'var/num', 10, 2, 2, 100 ),
               height => array( type => 'var/num', 10, 2, 2, 100 ),
               margin => array( type => 'var/num', 2, 0, 0.5, 5 ),
               radius => array( type => 'var/num', 0.2, 0, 0.05, 10 ) );
            $mm[$x][app] = array( type => 'var/enum', '' ); }
         if( $type == file ){
            $mm[$x][mime] = $mime;
            if( place( $mime ) == text )
               file_put_contents( "$id/content", 'textextex' ); }
         return $x; }

      function val( $x ){
         return m( "$x/0" ); }

      function root( $exit = false ){ global $m, $p;
         if( $m[lock][1] > time() && $m[lock][0] == session_id() ){
            if( $exit ) $m[lock] = false; else $m[lock][1] = time() + 600; save(); return true; }
         if( $m[lock][1] < time() && ( !$m[pass][0] || ( count( $p ) == 1 && $p[pass] == $m[pass][0] ) ) ){
            $m[lock] = array( session_id(), time() + 600 ); save(); return true; }
         return false; }

      function find( $wask = array(), $loc = '', $care = false ){ $mm = & m( $loc ); $r = array();
         foreach( $mm as $k => $v ) if( is_array( $v ) ){ $id = ( $loc ? "$loc/$k" : $k );
            $ok = ( $care ? ( $v[show] && !$v[show][0] ? false : true ) : true );
            if( $ok ) foreach( $v as $ck => $cv ) foreach( $wask as $fk => $fv ){
               $fv2 = rtrim( $fv, '*' ); if( substr( $v[$fk], 0, strlen( $fv2 ) ) != $fv2 ) $ok = false; }
            if( $ok ) $r[] = $id; /* if( $v[type] == dir ) */ $r = array_merge( $r, find( $wask, $id, $care ) ); }
         return $r; }

      function del( $x ){ global $m; $loc = place( $x ); $mm = & m( $loc ); $id = $x; $x = tar( $x );
         menu( remove, $id );
         foreach( $mm[$x] as $key => $val ) del( "$id/$key" );
         if( $mm[$x][cache] ) foreach( array_keys( $mm[$x][cache] ) as $n )
            unlink( "data/cache/$id-$n" );
         if( $mm[$x][type] == 'var/file' ){
            unset( $mm[$x][time] );
            $m[style_time] = time(); }
         else{
            rmdir( "data/data/$id" );
            unset( $mm[$x] ); }; }

      function ren( $x, $y ){ $loc = place( $x ); $mm = & m( $loc );
         $oldname = tar( $x ); $oldid = ( $loc ? "$loc/$oldname" : $oldname );
         $newname = newname( $loc ? "$loc/$y" : $y ); $newid = ( $loc ? "$loc/$newname" : $newname );
         menu( replace, $oldid, $newid );
         if( $mm[$oldname][cache] ){
            foreach( array_keys( $mm[$oldname][cache] ) as $n )
               rename( "data/cache/$oldid-$n", "data/cache/$newid-$n" );
            rename( "data/cache/$oldid", "data/cache/$newid" ); }
         rename( "data/data/$oldid", "data/data/$newid" );
         $mm[$newname] = $mm[$oldname];
         unset( $mm[$oldname] );
         if( $mm[$newname][title][0] == $oldname ) $mm[$newname][title][0] = $newname;
         return $newname; }

      function cache( $x ){ $loc = place( $x ); $tt = & m( $x ); $x = tar( $x );
         $id = 'data/data/' . ( $loc ? "$loc/$x" : $x );
         $twin = 'data/cache' . ( $loc ? "/$loc" : '' ); if( !is_dir( $twin ) ) mkdir( $twin, 0777, true ); $twin .= "/$x";
         $tt[cache] = array(); $type = tar( $tt[mime] );
         $i = $type == jpeg ? imagecreatefromjpeg( $id ) : imagecreatefrompng( $id );
         $iw = $tt[width] = imagesx( $i ); $ih = $tt[height] = imagesy( $i );
         for( $jw = $iw, $jh = $ih, $n = 0; $jw > 50 && $jh > 50; $jw = intval( $jw/1.5 ), $jh = intval( $jh/1.5 ), $n++ ){
            $tt[cache][$n] = array( width => $jw, height => $jh );
            $j = imagecreatetruecolor( $jw, $jh );
            imagecopyresized( $j ,$i, 0, 0, 0, 0, $jw, $jh, $iw, $ih );
            if( $type == jpeg ) imagejpeg( $j, "$twin-$n", 90 );
            else imagepng( $j, "$twin-$n", 8, PNG_ALL_FILTERS );
            imagedestroy( $j ); } }

      function cached( $x, $to, $w, $h ){ $tt = & m( $x ); $maxn = max( array_keys( $tt[cache] ) );
         $H = ( $to == contain && $w / $h >= $tt[width] / $tt[height] ) || ( $to == cover && $w / $h < $tt[width] / $tt[height] );
         for( $n = $maxn; $tt[cache][$n][ $H ? height : width ] < ( $H ? $h : $w ) && $n > 0; $n-- ); return $n; }

      function upload( $d ){ global $f; $mm = & m( $d );
         foreach( $f[files][tmp_name] as $n => $x ) if( !$f[files][error][$n] ){ $id = $f[files][name][$n];
            $id = ( $d ? "$d/" : '' ) . newname( ( $d ? "$d/" : '' ) . ( strstr( $id, '.' ) === false ? $id : substr( $id, 0, -strlen( strrchr( $id, '.' ) ) ) ) );
            $t = tar( $id );
            move_uploaded_file( $x, 'data/data/' . $id );
            $mm[$t][type] = file;                                                                                                #########################
            $mm[$t][time] = time();                                                                                              #########################
            $mm[$t][mime] = $f[files][type][$n];                                                                                     #########################
            $mm[$t][show] = array( type => 'var/bit', ( $d ? $mm[show][0] : 1 ) );                                                      #########################
            $mm[$t][title] = array( type => 'var/text', $t );                                                                         #########################
            $mm[$t][size] = $f[files][size][$n];                                                                                     #########################
            if( in_array( tar( $mm[$t][mime] ), array( jpeg, png ) ) )
               cache( $id ); } }

      function setup( $t ){ global $m, $p, $f; $tt = & m( $t );
         foreach( $tt as $x => $y ) if( place( $tt[$x][type] ) == 'var' ) switch( tar( $tt[$x][type] ) ){
            default: if( isset( $p[$x] ) ) $tt[$x][0] = $p[$x]; break;
            case 'colors': if( is_array( $p[$x] ) ) foreach( $p[$x] as $n => $color ) $tt[$x][$n] = $color; break;
            case 'bit': if( $p ){
               if( $x !== show ) $tt[$x][0] = $p[$x] ? 1 : 0;
               else foreach( find( array( type => 'var/bit' ), $t ) as $z ) if( tar( $z ) == show ){
                  $cval = & m( "$z/0" );
                  $cval = ( $p[$x] ? 1 : 0 );
                  if( !$cval ) menu( remove, place( $z ) ); } }
               break;
            case 'file': if( $f[$x] && !$f[$x][error] ){
               $id = 'data/data' . ( $t ? "/$t" : '' ); if( !is_dir( $id ) ) mkdir( $id, 0777, true ); $id .= "/$x";
               move_uploaded_file( $f[$x][tmp_name], $id );
               $tt[$x][mime] = $f[$x][type];
               $tt[$x][size] = $f[$x][size];
               $tt[$x][time] = time();
               if( in_array( tar( $tt[$x][mime] ), array( jpeg, png ) ) )
                  cache( $t ? "$t/$x" : $x ); } } }


//######################################################################################################################################################################################

      $m = mem() or install();
      $args = array_map( urldecode, explode( '/', substr( str_replace( "?{$e[QUERY_STRING]}", '', $e[REQUEST_URI] ), $home ? strlen( $home )+1 : 0 ) ) );
      if( $args[0] === '' ) array_shift( $args );
      $loc = '';
      $mm = & $m; while( $args && isset( $mm[$args[0]] ) && isset( $mm[$args[0]][type] ) ){ $x = array_shift( $args ); $mm = & $mm[$x];
         $loc .= $loc ? "/$x" : $x; }
      $dir = $loc ? $loc : '.';
      $l1 = strstr( $loc, '/' ) === false;
      $a = array(); while( $args && $args[0] !== '' ) $a[] = array_shift( $args );
         array_shift( $args );
      $q = array_shift( $args );
      $short = strstr( $e[HTTP_ACCEPT], 'text/plain' ) === false ? false : true;

      function locargs(){ global $loc, $args;
         return $loc . ( $loc && $args ? '/' : '' ) . implode( '/', $args ); }

      switch( $q ){
         case 'dump':
            if( root() ){ echo '<pre>'; var_export( $mm ); echo '</pre>'; exit; }
            break;
         case 'style':
            header( 'Content-type: text/css; charset=UTF-8' );
            header( 'Cache-control: max-age=10'); header_remove( Expires ); header_remove( Pragma );
            require 'style.php';
            exit;
         case 'script':
            header( 'Content-type: text/javascript; charset=UTF-8' );
            header( 'Cache-control: max-age=10'); header_remove( Expires ); header_remove( Pragma );
            require 'script.php';
            exit;
         case 'exit':
            if( root( true ) && $short ) die( ok ); elseif( $short ) die( error );
            redirect(); }

      // serve file
      if( in_array( $mm[type], array( 'file', 'var/file' ) ) && $mm[time]
         && ( $a[0] == 'original' || ( $a[0] == 'cache' && $mm[cache][$a[1]] ) )
         && ( $mm[type] == 'var/file' || $mm[show][0] || root() ) ){
         header( 'Content-type: ' . $mm[mime] );
         header( 'Cache-control: max-age=' . round( ( time()-$mm[time] )/2 ) ); header_remove( Expires ); header_remove( Pragma );
         if( $a[0] == 'original' ){ readfile( "data/data/$loc" ); exit; }
         else{ readfile( "data/cache/$loc-{$a[1]}" ); exit; } }


      if( $short ) exit;

      $ui = require( 'ui.def.php' );

?>